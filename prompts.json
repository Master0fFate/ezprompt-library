{
  "version": "1.0",
  "lastUpdated": "2024-01-15",
  "prompts": [
    {
      "id": 1,
      "title": "REST API Development with Authentication",
      "description": "Generate a complete REST API with JWT authentication and best practices",
      "category": "API Design",
      "difficulty": "intermediate",
      "estimatedTime": "30-45 minutes",
      "prerequisites": ["Basic REST concepts", "Authentication knowledge"],
      "prompt": "Create a REST API for [RESOURCE] with the following requirements:\n\nTechnical Stack:\n- Language/Framework: [SPECIFY]\n- Database: [SPECIFY]\n\nCore Features:\n- Complete CRUD operations\n- JWT-based authentication\n- Role-based access control\n- Input validation and sanitization\n- Comprehensive error handling\n- Rate limiting\n- Request logging\n- API versioning\n\nSecurity Requirements:\n- Password hashing\n- SQL injection prevention\n- XSS protection\n- CORS configuration\n\nPlease follow REST best practices and use proper HTTP status codes.",
      "example": "Create a REST API for a blog system using Node.js, Express, and MongoDB with JWT authentication",
      "tags": ["api", "rest", "authentication", "jwt", "backend", "crud", "security"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 2,
      "title": "Advanced Algorithm Optimization",
      "description": "Comprehensive algorithm analysis and optimization with complexity analysis",
      "category": "Optimization",
      "difficulty": "advanced",
      "estimatedTime": "45-60 minutes",
      "prerequisites": ["Data structures", "Big O notation", "Algorithm design"],
      "prompt": "Analyze and optimize the following algorithm:\n\n[PASTE CODE HERE]\n\nAnalysis Requirements:\n1. Current State Analysis: Time complexity, space complexity, bottlenecks\n2. Optimization Strategy: Algorithmic improvements, data structure alternatives\n3. Optimized Implementation: Provide fully optimized code with comments\n4. Complexity Comparison: Before and after analysis\n5. Benchmarking: Test cases and performance comparison\n\nExplain all trade-offs and improvements made.",
      "example": "Optimize a nested loop algorithm for finding duplicate elements in an array",
      "tags": ["algorithm", "optimization", "complexity", "performance", "data-structures"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 3,
      "title": "Comprehensive Code Review",
      "description": "Professional code review with SOLID principles and design patterns",
      "category": "Code Review",
      "difficulty": "intermediate",
      "estimatedTime": "30-45 minutes",
      "prerequisites": ["SOLID principles", "Design patterns", "Clean code practices"],
      "prompt": "Please conduct a comprehensive code review:\n\n[PASTE CODE HERE]\n\nReview Focus Areas:\n1. Code Quality: Readability, maintainability, naming conventions\n2. SOLID Principles: Evaluate adherence to all five principles\n3. Design Patterns: Current patterns and suggested improvements\n4. Security: Input validation, authentication, data exposure\n5. Performance: Bottlenecks, memory leaks, inefficient operations\n6. Testing: Testability assessment and coverage gaps\n7. Refactoring: Provide specific examples with explanations\n\nPrioritize improvements as critical, important, or nice-to-have.",
      "example": "Review a React component with state management and API calls",
      "tags": ["code-review", "solid", "design-patterns", "refactoring", "best-practices", "clean-code"],
      "favorite": true,
      "custom": false
    },
    {
      "id": 4,
      "title": "Database Schema Design",
      "description": "Design normalized, scalable database schemas with indexing strategy",
      "category": "Architecture",
      "difficulty": "intermediate",
      "estimatedTime": "45-60 minutes",
      "prerequisites": ["Database normalization", "SQL", "Indexing concepts"],
      "prompt": "Design a comprehensive database schema for [DESCRIPTION]:\n\nRequirements:\n[LIST YOUR REQUIREMENTS]\n\nPlease Provide:\n1. Entity-Relationship Diagram\n2. Complete CREATE TABLE statements\n3. Primary and foreign keys\n4. Indexing strategy with rationale\n5. Normalization analysis\n6. Sample queries\n7. Scalability considerations\n8. Migration strategy",
      "example": "Design a database schema for an e-commerce platform",
      "tags": ["database", "schema", "sql", "design", "normalization", "indexing"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 5,
      "title": "Unit Testing Suite",
      "description": "Generate complete unit tests with mocking and edge cases",
      "category": "Testing",
      "difficulty": "intermediate",
      "estimatedTime": "30-45 minutes",
      "prerequisites": ["Testing frameworks", "Mocking concepts", "TDD principles"],
      "prompt": "Generate a comprehensive unit testing suite:\n\n[PASTE CODE HERE]\n\nTesting Requirements:\n1. Test Framework: [SPECIFY]\n2. Coverage: All methods, happy paths, edge cases (90%+ target)\n3. Structure: AAA pattern, setup/teardown\n4. Mocking: External dependencies, API calls, database\n5. Edge Cases: Null inputs, empty collections, large datasets\n6. Documentation: Test descriptions and setup instructions\n\nProvide complete, runnable test code.",
      "example": "Generate tests for a user authentication service",
      "tags": ["testing", "unit-tests", "tdd", "mocking", "jest", "quality-assurance"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 6,
      "title": "Security Audit",
      "description": "Comprehensive security analysis with OWASP Top 10 coverage",
      "category": "Security",
      "difficulty": "advanced",
      "estimatedTime": "60+ minutes",
      "prerequisites": ["Security fundamentals", "OWASP Top 10", "Common vulnerabilities"],
      "prompt": "Perform a comprehensive security audit:\n\n[PASTE CODE HERE]\n\nSecurity Assessment:\n1. OWASP Top 10: Check all categories\n2. Input Validation: Sanitization, type checking\n3. Authentication & Authorization: Password storage, session management\n4. Data Protection: Encryption, sensitive data exposure\n5. API Security: Rate limiting, CORS\n6. Dependencies: Outdated packages, CVEs\n7. Code Issues: Hardcoded secrets, race conditions\n\nProvide severity ratings and detailed fixes with code examples.",
      "example": "Audit a Node.js Express API with authentication",
      "tags": ["security", "audit", "vulnerabilities", "owasp", "penetration-testing"],
      "favorite": true,
      "custom": false
    },
    {
      "id": 7,
      "title": "API Documentation",
      "description": "Generate comprehensive API documentation with examples",
      "category": "Documentation",
      "difficulty": "beginner",
      "estimatedTime": "20-30 minutes",
      "prerequisites": ["API concepts", "Documentation standards"],
      "prompt": "Generate comprehensive API documentation:\n\n[PASTE CODE HERE]\n\nFormat: [OpenAPI/Swagger/Markdown]\n\nRequired Sections:\n1. Overview: Purpose, base URL, version, authentication\n2. Endpoints: Method, path, parameters, responses, examples\n3. Data Models: Object definitions, field descriptions\n4. Authentication: Flow, token format, headers\n5. Error Handling: Error codes and troubleshooting\n6. Code Examples: Multiple languages\n7. Changelog: Version history, breaking changes",
      "example": "Document a RESTful API for a task management system",
      "tags": ["documentation", "api", "swagger", "openapi", "technical-writing"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 8,
      "title": "Debugging Assistant",
      "description": "Systematic debugging with root cause analysis",
      "category": "Debugging",
      "difficulty": "intermediate",
      "estimatedTime": "30-45 minutes",
      "prerequisites": ["Debugging techniques", "Error analysis"],
      "prompt": "Help debug this issue systematically:\n\nCode:\n[PASTE CODE HERE]\n\nError/Issue:\n[DESCRIBE ERROR OR BEHAVIOR]\n\nExpected Behavior:\n[DESCRIBE EXPECTED BEHAVIOR]\n\nEnvironment:\n- Language/Framework: [SPECIFY]\n- Version: [SPECIFY]\n\nPlease Provide:\n1. Root Cause Analysis\n2. Step-by-Step Debugging Process\n3. The Fix with explanations\n4. Prevention Strategies\n5. Test cases to verify\n6. Alternative Solutions\n7. Recommended debugging tools",
      "example": "Debug a React component causing infinite re-renders",
      "tags": ["debugging", "troubleshooting", "error-handling", "root-cause-analysis"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 9,
      "title": "Async Programming",
      "description": "Implement robust async patterns with error handling",
      "category": "Code Generation",
      "difficulty": "advanced",
      "estimatedTime": "45-60 minutes",
      "prerequisites": ["Async programming", "Concurrency concepts"],
      "prompt": "Implement a robust asynchronous solution for [TASK]:\n\nRequirements:\n1. Language: [SPECIFY]\n2. Handle concurrent operations\n3. Proper error handling\n4. Timeout handling\n5. Cancellation support\n6. Retry logic with exponential backoff\n7. Circuit breaker pattern\n8. Performance optimization\n9. Monitoring and logging\n\nProvide production-ready code with detailed comments.",
      "example": "Implement parallel API calls with retry logic",
      "tags": ["async", "concurrent", "promises", "parallel", "performance"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 10,
      "title": "Design Pattern Implementation",
      "description": "Implement design patterns with real-world examples",
      "category": "Architecture",
      "difficulty": "intermediate",
      "estimatedTime": "30-45 minutes",
      "prerequisites": ["OOP concepts", "Design patterns"],
      "prompt": "Implement the [PATTERN NAME] design pattern:\n\nUse Case: [DESCRIBE USE CASE]\nContext: [PROVIDE CONTEXT]\n\nRequirements:\n1. Complete implementation with all components\n2. UML diagram (text/ASCII)\n3. Component roles and relationships\n4. Usage examples\n5. Benefits analysis\n6. Trade-offs\n7. Alternative patterns\n8. Best practices\n\nPopular patterns: Singleton, Factory, Builder, Observer, Strategy",
      "example": "Implement Strategy pattern for payment processing",
      "tags": ["design-patterns", "architecture", "oop", "solid"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 11,
      "title": "React Component",
      "description": "Build scalable React components with hooks",
      "category": "Code Generation",
      "difficulty": "intermediate",
      "estimatedTime": "30-45 minutes",
      "prerequisites": ["React", "Hooks", "TypeScript"],
      "prompt": "Create a production-ready React component for [DESCRIPTION]:\n\nRequirements:\n1. Functional component with Hooks\n2. TypeScript interfaces\n3. State management approach\n4. Styling: [CSS Modules/Styled Components/Tailwind]\n5. Features: [LIST FEATURES]\n6. Performance optimization\n7. Accessibility (ARIA, keyboard navigation)\n8. Testing with React Testing Library\n9. Documentation\n\nProvide complete TypeScript code.",
      "example": "Create a data table with sorting and pagination",
      "tags": ["react", "components", "hooks", "typescript", "frontend"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 12,
      "title": "Microservices Architecture",
      "description": "Design scalable microservices",
      "category": "Architecture",
      "difficulty": "advanced",
      "estimatedTime": "60+ minutes",
      "prerequisites": ["Microservices", "Distributed systems"],
      "prompt": "Design a microservices architecture for [SYSTEM]:\n\nRequirements: [LIST REQUIREMENTS]\n\nProvide:\n1. Service decomposition and boundaries\n2. Architecture diagram\n3. Communication patterns (REST, gRPC, messaging)\n4. Data management strategy\n5. Service discovery and load balancing\n6. Resilience patterns (circuit breaker, retry)\n7. Security (OAuth2, JWT)\n8. Observability (tracing, logging, metrics)\n9. Deployment (Docker, Kubernetes)\n10. Scalability strategy\n11. Technology stack recommendations",
      "example": "Design microservices for e-commerce platform",
      "tags": ["microservices", "architecture", "distributed-systems", "scalability"],
      "favorite": true,
      "custom": false
    },
    {
      "id": 13,
      "title": "GraphQL API",
      "description": "Build complete GraphQL API with resolvers",
      "category": "API Design",
      "difficulty": "intermediate",
      "estimatedTime": "45-60 minutes",
      "prerequisites": ["GraphQL", "Schema design"],
      "prompt": "Create a complete GraphQL API for [DOMAIN]:\n\nRequirements:\n1. Schema design (types, interfaces, enums)\n2. Queries with pagination, filtering, sorting\n3. Mutations (create, update, delete)\n4. Subscriptions for real-time updates\n5. Resolvers with DataLoader\n6. Performance optimization\n7. Security (authentication, authorization)\n8. Testing suite\n9. Documentation\n\nTechnology: [Apollo Server/etc.]\nProvide production-ready code.",
      "example": "Create GraphQL API for social media platform",
      "tags": ["graphql", "api", "apollo", "subscriptions", "backend"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 14,
      "title": "CI/CD Pipeline",
      "description": "Set up complete CI/CD pipeline",
      "category": "DevOps",
      "difficulty": "intermediate",
      "estimatedTime": "45-60 minutes",
      "prerequisites": ["CI/CD concepts", "Docker"],
      "prompt": "Create a CI/CD pipeline for [PROJECT TYPE]:\n\nDetails:\n- Repository: [GitHub/GitLab]\n- Platform: [GitHub Actions/GitLab CI]\n- Deployment: [AWS/GCP/Azure]\n\nPipeline Stages:\n1. Build: Dependencies, artifacts, Docker image\n2. Test: Linting, unit tests, integration tests, coverage\n3. Quality Gates: Coverage threshold, security scanning\n4. Deployment: Dev, staging, production\n5. Post-Deployment: Smoke tests, monitoring\n\nProvide complete configuration files and documentation.",
      "example": "CI/CD for Node.js API with AWS deployment",
      "tags": ["cicd", "devops", "automation", "docker", "deployment"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 15,
      "title": "Performance Optimization",
      "description": "Comprehensive performance analysis",
      "category": "Optimization",
      "difficulty": "advanced",
      "estimatedTime": "60+ minutes",
      "prerequisites": ["Performance profiling"],
      "prompt": "Perform comprehensive performance optimization:\n\n[PASTE CODE HERE]\n\nAnalysis:\n1. Performance profiling and bottlenecks\n2. Code-level optimization\n3. Memory optimization\n4. I/O optimization (database, caching)\n5. Network optimization\n6. Frontend optimization (bundle size, lazy loading)\n7. Backend optimization (indexing, caching)\n8. Benchmarking (before/after metrics)\n\nProvide detailed report and optimized code.",
      "example": "Optimize slow API endpoint processing large datasets",
      "tags": ["performance", "optimization", "profiling", "benchmarking"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 16,
      "title": "React Native Mobile App",
      "description": "Build cross-platform mobile apps",
      "category": "Code Generation",
      "difficulty": "intermediate",
      "estimatedTime": "45-60 minutes",
      "prerequisites": ["React Native", "Mobile development"],
      "prompt": "Create a React Native app for [DESCRIPTION]:\n\nRequirements:\n1. Platform: iOS/Android/Both\n2. Navigation and state management\n3. Features: [LIST FEATURES]\n4. Native features (camera, geolocation, notifications)\n5. Performance optimization\n6. Offline support\n7. Testing (unit, E2E with Detox)\n8. Deployment configuration\n\nUse TypeScript and provide complete project structure.",
      "example": "Create fitness tracking app with workout logging",
      "tags": ["react-native", "mobile", "ios", "android", "cross-platform"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 17,
      "title": "ML Model Integration",
      "description": "Integrate ML models into applications",
      "category": "Code Generation",
      "difficulty": "advanced",
      "estimatedTime": "60+ minutes",
      "prerequisites": ["Machine learning", "Model deployment"],
      "prompt": "Integrate ML model into [APPLICATION]:\n\nModel Details:\n- Type: [Classification/Regression/NLP/Vision]\n- Framework: [TensorFlow/PyTorch]\n\nRequirements:\n1. Model serving infrastructure\n2. API design for inference\n3. Preprocessing pipeline\n4. Postprocessing and formatting\n5. Performance optimization\n6. Monitoring and drift detection\n7. Error handling and fallbacks\n8. Scalability (load balancing, GPU)\n9. Security\n10. Documentation\n\nProvide complete integration code and deployment guide.",
      "example": "Integrate sentiment analysis into feedback system",
      "tags": ["machine-learning", "ai", "model-deployment", "tensorflow", "api"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 18,
      "title": "WebSocket Real-Time",
      "description": "Implement real-time features with WebSocket",
      "category": "Code Generation",
      "difficulty": "intermediate",
      "estimatedTime": "30-45 minutes",
      "prerequisites": ["WebSocket protocol", "Real-time communication"],
      "prompt": "Implement real-time communication for [USE CASE]:\n\nRequirements:\n1. WebSocket server setup (Socket.io/ws)\n2. Client connection with reconnection logic\n3. Event system and broadcasting\n4. Features: messaging, presence, typing indicators\n5. Scalability (Redis adapter, load balancing)\n6. Security (authentication, validation)\n7. Performance (compression, heartbeat)\n8. Error handling\n9. Testing and monitoring\n\nProvide complete server and client code.",
      "example": "Implement real-time chat with typing indicators",
      "tags": ["websocket", "real-time", "socket-io", "chat", "messaging"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 19,
      "title": "Serverless Functions",
      "description": "Build serverless functions",
      "category": "Code Generation",
      "difficulty": "intermediate",
      "estimatedTime": "30-45 minutes",
      "prerequisites": ["Serverless concepts", "Cloud platforms"],
      "prompt": "Create serverless functions for [USE CASE]:\n\nPlatform: [AWS Lambda/Google Cloud Functions/Azure]\n\nRequirements:\n1. Function implementation with validation\n2. Triggers (HTTP, scheduled, database, queue)\n3. Configuration (runtime, memory, timeout)\n4. Dependencies and cold start optimization\n5. Integration with cloud services\n6. Performance optimization\n7. Security (IAM, authentication)\n8. Monitoring and logging\n9. Testing (unit, integration, local)\n10. Deployment (IaC, CI/CD)\n\nProvide function code and infrastructure templates.",
      "example": "Create image processing function for uploads",
      "tags": ["serverless", "lambda", "cloud", "faas", "aws"],
      "favorite": false,
      "custom": false
    },
    {
      "id": 20,
      "title": "Data Pipeline ETL",
      "description": "Build robust data pipelines",
      "category": "Code Generation",
      "difficulty": "advanced",
      "estimatedTime": "60+ minutes",
      "prerequisites": ["ETL concepts", "Data processing"],
      "prompt": "Design and implement data pipeline for [TASK]:\n\nRequirements:\n1. Data sources and extraction\n2. Transformation logic (cleaning, validation, enrichment)\n3. Loading to target system\n4. Orchestration (Airflow/Prefect)\n5. Data quality checks\n6. Error handling and retry logic\n7. Performance optimization\n8. Monitoring and alerting\n9. Testing suite\n\nTechnology Stack:\n- Orchestration: [Airflow/Prefect]\n- Processing: [Pandas/Spark]\n- Storage: [PostgreSQL/BigQuery/S3]\n\nProvide complete pipeline code and configuration.",
      "example": "Build ETL pipeline for customer data analytics",
      "tags": ["etl", "data-pipeline", "airflow", "data-engineering", "analytics"],
      "favorite": false,
      "custom": false
    }
  ]
}
